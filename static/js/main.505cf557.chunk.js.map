{"version":3,"sources":["components/useFetch/useFetch.jsx","components/HomePage/Post.jsx","components/HomePage/Posts.jsx","components/HomePage/HomePage.jsx","components/NewPost/Form.jsx","components/NewPost/NewPost.jsx","components/PostPage/PostPage.jsx","App.jsx","reportWebVitals.js","index.js"],"names":["useFetch","url","opts","useState","data","setData","isLoading","setIsLoading","error","setError","useEffect","a","fetch","response","ok","Error","statusText","json","fetchData","Post","post","navigate","useNavigate","className","onClick","id","moment","created","fromNow","content","Posts","map","item","HomePage","process","length","Form","onSubmit","onClose","form","setForm","name","value","onChange","e","target","prev","placeholder","type","NewPost","method","headers","body","JSON","stringify","then","PostPage","useParams","isEdit","setEdit","findPost","find","el","App","to","path","exact","element","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.505cf557.chunk.js","sourcesContent":["import { useState, useEffect } from 'react';\n\nexport default function useFetch(url, opts = null) {\n   const [data, setData] = useState(null);\n   const [isLoading, setIsLoading] = useState(false);\n   const [error, setError] = useState(null);\n\n   useEffect(() => {\n      const fetchData = async () => {\n         setIsLoading(true);\n         try {\n            const response = await fetch(url, opts);\n            if (!response.ok) {\n               throw new Error(response.statusText);\n            }\n\n            const json = await response.json();\n            setData(json);\n            setError(null);\n         } catch (e) {\n            setError(e);\n         } finally {\n            setIsLoading(false);\n         }\n      };\n      fetchData();\n   }, [url, opts]);\n\n   return [data, isLoading, error];\n}\n","/* eslint-disable jsx-a11y/no-noninteractive-element-interactions */\n/* eslint-disable jsx-a11y/click-events-have-key-events */\nimport React from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport moment from 'moment';\n\nfunction Post({ post }) {\n   const navigate = useNavigate();\n   const onClick = () => {\n      navigate(`/posts/${post.id}`);\n   };\n\n   return (\n      <article className=\"Post\" onClick={onClick}>\n         <div className=\"Post__content\">\n            <header className=\"Post__header\">\n               <div className=\"Post-creator__img\" />\n               <div className=\"Post__about\">\n                  <div className=\"Post-creator__name\">Имя Фамилия</div>\n                  <span className=\"Post__time\">\n                     {moment(post.created).fromNow()}\n                  </span>\n               </div>\n            </header>\n            <div className=\"Post__text\">\n               <p>{post.content}</p>\n            </div>\n         </div>\n      </article>\n   );\n}\n\nPost.propTypes = {\n   post: PropTypes.shape({\n      content: PropTypes.string,\n      id: PropTypes.number,\n      created: PropTypes.number,\n   }).isRequired,\n};\n\nexport default Post;\n","import React from 'react';\nimport Post from './Post';\n\nfunction Posts({ data }) {\n   return data.map((item) => <Post post={item} key={item.id} />);\n}\n\nexport default Posts;\n","import React from 'react';\nimport useFetch from '../useFetch/useFetch';\nimport Posts from './Posts';\n\nfunction HomePage() {\n   const [data, isLoading, error] = useFetch(\n      `${process.env.REACT_APP_URL}posts`\n   );\n\n   return (\n      <div className=\"posts\">\n         {isLoading && <div> Загрузка... </div>}\n         {error && <div> {error} </div>}\n\n         {data && !isLoading && (\n            <section className=\"posts-wrapper\">\n               {data.length < 1 ? <div>нет постов</div> : <Posts data={data} />}\n            </section>\n         )}\n      </div>\n   );\n}\n\nexport default HomePage;\n","import React, { useState } from 'react';\nimport propTypes from 'prop-types';\n\nfunction Form({ onSubmit, onClose }) {\n   const [form, setForm] = useState({ content: '' });\n   const onFieldChange = (e) => {\n      const { target } = e;\n      setForm((prev) => ({\n         ...prev,\n         [target.name]: target.value,\n      }));\n   };\n   const onSubmitForm = () => {\n      onSubmit(form.content);\n   };\n\n   return (\n      <div className=\"Form\">\n         <form>\n            <textarea\n               className=\"Form_content\"\n               name=\"content\"\n               value={form.content}\n               onChange={onFieldChange}\n               placeholder=\"Введите текст\"\n            />\n            <div className=\"Form_control\">\n               <button\n                  className=\"Form_submit\"\n                  type=\"button\"\n                  onClick={onSubmitForm}\n               >\n                  опубликовать\n               </button>\n               <button className=\"Form_close\" type=\"button\" onClick={onClose}>\n                  ×\n               </button>\n            </div>\n         </form>\n      </div>\n   );\n}\n\nForm.propTypes = {\n   onSubmit: propTypes.func.isRequired,\n   onClose: propTypes.func.isRequired,\n};\n\nexport default Form;\n","import React from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport Form from './Form';\n\nfunction NewPost() {\n   const navigate = useNavigate();\n   const onClose = () => navigate('/');\n\n   const onSubmit = (content) => {\n      if (content === '') {\n         onClose();\n         return;\n      }\n      fetch(`${process.env.REACT_APP_URL}posts`, {\n         method: 'POST',\n         headers: {\n            'Content-Type': 'application/json',\n         },\n         body: JSON.stringify({\n            id: 0,\n            content,\n         }),\n      }).then(() => onClose());\n   };\n\n   return (\n      <div className=\"NewPost\">\n         <Form onSubmit={onSubmit} onClose={onClose} />\n      </div>\n   );\n}\n\nexport default NewPost;\n","import React, { useState } from 'react';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport useFetch from '../useFetch/useFetch';\nimport Post from '../HomePage/Post';\nimport Form from '../NewPost/Form';\n\nfunction PostPage() {\n   const { id } = useParams();\n   const [isEdit, setEdit] = useState(false);\n\n   const [data, isLoading, error] = useFetch(\n      `${process.env.REACT_APP_URL}posts/`\n   );\n\n   const findPost = () => data.find((el) => +el.id === +id);\n\n   const navigate = useNavigate();\n   const onClose = () => navigate('/');\n\n   const onDelete = () => {\n      fetch(`${process.env.REACT_APP_URL}posts/${id}`, {\n         method: 'DELETE',\n         headers: {\n            'Content-Type': 'application/json',\n         },\n      }).then(() => onClose());\n   };\n\n   const onEdit = () => {\n      setEdit(!isEdit);\n   };\n\n   const onSubmit = (content) => {\n      fetch(`${process.env.REACT_APP_URL}posts/`, {\n         method: 'POST',\n         headers: {\n            'Content-Type': 'application/json',\n         },\n         body: JSON.stringify({\n            id: +id,\n            content,\n         }),\n      }).then(() => onClose());\n   };\n\n   return (\n      <div className=\"post\">\n         {isLoading && <div> Загрузка... </div>}\n         {error && <div> {error} </div>}\n         {data && !isLoading && (\n            <div className=\"Post-wrapper\">\n               <button className=\"Post_close\" type=\"button\" onClick={onClose}>\n                  назад\n               </button>\n               <Post post={findPost()} />\n               <div className=\"Post_control\">\n                  <button\n                     className=\"Post_delete\"\n                     type=\"button\"\n                     onClick={onDelete}\n                  >\n                     удалить\n                  </button>\n                  <button className=\"Post_close\" type=\"button\" onClick={onEdit}>\n                     редактировать\n                  </button>\n                  {isEdit && (\n                     <div className=\"PostPage__edit\">\n                        <Form\n                           post={findPost()}\n                           onSubmit={onSubmit}\n                           onClose={onClose}\n                        />\n                     </div>\n                  )}\n               </div>\n            </div>\n         )}\n      </div>\n   );\n}\n\nexport default PostPage;\n","import './App.css';\nimport React from 'react';\nimport { BrowserRouter as Router, Routes, Route, Link } from 'react-router-dom';\nimport HomePage from './components/HomePage/HomePage';\nimport NewPost from './components/NewPost/NewPost';\nimport PostPage from './components/PostPage/PostPage';\n\nfunction App() {\n   return (\n      <div className=\"App\">\n         <Router>\n            <Link to=\"/posts/new\">\n               <div className=\"link\">\n                  <p>Создать пост</p>\n               </div>\n            </Link>\n\n            <div className=\"page\">\n               <Routes>\n                  <Route path=\"/\" exact element={<HomePage />} />\n                  <Route path=\"/posts/new\" element={<NewPost />} />\n                  <Route path=\"/posts/:id\" element={<PostPage />} />\n               </Routes>\n            </div>\n         </Router>\n      </div>\n   );\n}\n\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\n   if (onPerfEntry && onPerfEntry instanceof Function) {\n      import('web-vitals').then(\n         ({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n            getCLS(onPerfEntry)\n            getFID(onPerfEntry)\n            getFCP(onPerfEntry)\n            getLCP(onPerfEntry)\n            getTTFB(onPerfEntry)\n         }\n      )\n   }\n}\n\nexport default reportWebVitals\n","/* eslint-disable react/jsx-filename-extension */\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n   <React.StrictMode>\n      <App />\n   </React.StrictMode>,\n   document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}